TODO:
- Performance
    - Botttleneck: ready_async_o signal from ID back to IF.
    - Introduce a skid between stages to fix this
    - Bottleneck: bypassing -> branch calculations -> jmps
    - Split Decode stage and handle branches/jumps in the second one
- PS2
    - Get working with real PS2 keyboard.
    - Apparently need to ACK the AA, therefore need PS2 Tx module and tri-state buffers
- UART
    - BIOS support
    - How do I want to handle this in the simulator?  Feels like another window.
    - Flow Control
- Memory
    - Allow for memory stalls
    - Add instruction & data cache
    - Add memory controller and DDR
- BIOS
    - Provide UART interface for loading an ELF and jumping to it
- ISA Extensions
    - M - Multiplication & Division (multi-cycle)
    - A - Atomics
- Machine Level ISA
    - CSR
        - Decode should confirm address is read/executable, otherwise trap
        - Memory access should confirm address is read/write as appropriate
        - Expose chip select along with rwx.  Can use it externally to drive the dmem mux...
        - MTIME and MTIMECMP memory mapped registers??
        - Implement timers
- PS/2
    - PS/2 Mouse

Reference:
http://fpgacpu.ca/fpga/index.html
https://passlab.github.io/CSE564/notes/lecture09_RISCV_Impl_pipeline.pdf
https://github.com/ultraembedded/riscv/
https://github.com/combinatorylogic/soc/blob/master/backends/c2/hw/rtl/core.v
https://github.com/google/riscv-dv
https://github.com/riscv/riscv-isa-sim
https://github.com/rems-project/sail-riscv

Implemented ISA:
- RV32I
- C
- Zicsr
- Zifencei
