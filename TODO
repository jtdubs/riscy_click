TODO:
- Interrupts
    - Interrupt controller aggregates interrupts from external sources (keyboard, mouse, UART, etc.)
    - Interrupt controller has an mmap'd register for reading and clearing external interrupts
    - Interrupt controller has a single interrupt output that drives the Interrupt Pending CSR bit
    - CSR if Pending & Enabled outputs the Trap Address and an Interrupt indicator
    - ID treats the Interrupt indicator just like a Trap instruction.
    - After all this works, I can implement WFI
- Keyboard
    - Update BIOS to use interrupts to handle keyboard input
- Peripherals
    - UART
- Machine Level ISA
    - CSR
        - Decode should confirm address is read/executable, otherwise trap
        - Memory access should confirm address is read/write as appropriate
        - Expose chip select along with rwx.  Can use it externally to drive the dmem mux...
        - MTIME and MTIMECMP memory mapped registers??
- ISA Extensions
    - A - Atomics
    - C - Compressed
    - M - Multiplication & Division (multi-cycle)
- VGA
    - 1280x1024
- Memory
    - Allow for memory stalls
    - Add instruction & data cache
    - Add memory controller and DDR
- CPU
    - Reduce complexity if possible in:
        - vga_controller
        - cpu_id
    - Change stage breakdown or increase stages to up clock speed
- BIOS
    - Provide UART interface for loading an ELF and jumping to it

Reference:
http://fpgacpu.ca/fpga/index.html
https://passlab.github.io/CSE564/notes/lecture09_RISCV_Impl_pipeline.pdf
https://github.com/ultraembedded/riscv/
https://github.com/combinatorylogic/soc/blob/master/backends/c2/hw/rtl/core.v
https://github.com/google/riscv-dv
https://github.com/riscv/riscv-isa-sim
https://github.com/rems-project/sail-riscv
