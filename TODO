TODO:
- Keyboard
    - Keyboard controller
    - Interrupt controller
    - WFI instruction
    - Idea:
        - PS2 RX :: PS2 Bitstream -> PS2 Validated Bytes
        - PS2 Kbd :: PS2 Validated Bytes -> Key Events { break, extended, scancode }
        - ROM :: { extended, scancode } -> Virtual Key Code
        - FIFO holds 16 { break, Virtual Key Code }
        - FIFO non-empty and FIFO full indicators become external interrupts
        - FIFO output is memory mapped
        - CPU can choose to enable interrupt and have a keyboard handler, or leave it off and poll
- Sim UI
    - Halt output
    - Finish output
- Debug Extension
- Machine Level ISA
    - CSR
        - Decode should confirm address is read/executable, otherwise trap
        - Memory access should confirm address is read/write as appropriate
        - Expose chip select along with rwx.  Can use it externally to drive the dmem mux...
        - MTIME and MTIMECMP memory mapped registers??
    - Instructions
        - WFI
- Peripherals
    - PS/2
    - UART
- ISA Extensions
    - A - Atomics
    - C - Compressed
    - M - Multiplication & Division (multi-cycle)
- VGA
    - 1280x1024
- Memory
    - Allow for memory stalls
    - Add instruction & data cache
    - Add memory controller and DDR

Reference:
http://fpgacpu.ca/fpga/index.html
https://passlab.github.io/CSE564/notes/lecture09_RISCV_Impl_pipeline.pdf
https://github.com/ultraembedded/riscv/
https://github.com/combinatorylogic/soc/blob/master/backends/c2/hw/rtl/core.v
https://github.com/google/riscv-dv
https://github.com/riscv/riscv-isa-sim
https://github.com/rems-project/sail-riscv
