TODO:
- Verilog
    - All the CSR siganls should be _async ??
    - Can I make the main ID casez unique?  It's close.
    - Can I replace reset signal with default values or all registers?
        - Does that help timing and complexity?  If so, how much?
        - How can I initialize output registers?  Initial blocks fight with always_ff blocks.
- Peripherals
    - UART
- BIOS
    - Provide UART interface for loading an ELF and jumping to it
- Machine Level ISA
    - CSR
        - Decode should confirm address is read/executable, otherwise trap
        - Memory access should confirm address is read/write as appropriate
        - Expose chip select along with rwx.  Can use it externally to drive the dmem mux...
        - MTIME and MTIMECMP memory mapped registers??
- ISA Extensions
    - A - Atomics
    - C - Compressed
    - M - Multiplication & Division (multi-cycle)
- VGA
    - 1280x1024
- Memory
    - Allow for memory stalls
    - Add instruction & data cache
    - Add memory controller and DDR
- CPU
    - Change stage breakdown or increase stages to up clock speed
- Interrupt Controller
    - Interrupt controller aggregates interrupts from external sources (keyboard, mouse, UART, etc.)
    - Interrupt controller has an mmap'd register for reading and clearing external interrupts
    - Interrupt controller has a single interrupt output that drives the Interrupt Pending CSR bit

Reference:
http://fpgacpu.ca/fpga/index.html
https://passlab.github.io/CSE564/notes/lecture09_RISCV_Impl_pipeline.pdf
https://github.com/ultraembedded/riscv/
https://github.com/combinatorylogic/soc/blob/master/backends/c2/hw/rtl/core.v
https://github.com/google/riscv-dv
https://github.com/riscv/riscv-isa-sim
https://github.com/rems-project/sail-riscv
