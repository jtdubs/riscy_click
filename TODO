TODO:
- Use debug core to get implementation working... start with cycle_counter, pc, ir...
- Naming convention for signals that handles the bypass / hazard signals better.  consider _i / _o...
- Floorplanning?
- Analyze timing more?

Steps:
1. Allow for arbitrary-time memory access / stalls
2. Switch to mix of BRAM & DDR
3. Move to design with unified memory, instruction/data caches, memory controller

Reference:
http://fpgacpu.ca/fpga/index.html
https://passlab.github.io/CSE564/notes/lecture09_RISCV_Impl_pipeline.pdf
https://github.com/ultraembedded/riscv/
https://github.com/combinatorylogic/soc/blob/master/backends/c2/hw/rtl/core.v

Video signals?
Keyboard/mouse signals?
USB signals?
Pipelining?
Switch from distributed memory to BRAM or DDR?
